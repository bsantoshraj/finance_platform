# main-backend/middleware.py
import jwt
import os
import requests
from functools import wraps
from flask import request, jsonify

JWT_SECRET = os.getenv('JWT_SECRET', 'your-secret-key')


def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        # Skip token validation for OPTIONS requests (CORS preflight)
        if request.method == 'OPTIONS':
            print("Handling OPTIONS request, bypassing token validation")
            return f(*args, **kwargs)

        token = None
        if 'Authorization' in request.headers:
            token = request.headers['Authorization'].split(" ")[1]  # Expecting "Bearer <token>"

        if not token:
            print("Token is missing")
            return jsonify({'error': 'Token is missing'}), 401

        try:
            data = jwt.decode(token, 'your_secret_key', algorithms=["HS256"])
            print(f"Token decoded successfully, user_id: {data['user_id']}")
            request.user_id = data['user_id']
        except Exception as e:
            print(f"Token validation failed: {str(e)}")
            return jsonify


def cfa_required(f):
    """
    Decorator to ensure the user is a CFA and has been approved.
    """
    @wraps(f)
    @token_required
    def decorated(*args, **kwargs):
        if request.role != 'CFA':
            return jsonify({'error': 'Access restricted to CFAs'}), 403
        if request.status != 'approved':
            return jsonify({'error': 'CFA must be approved to provide services'}), 403
        return f(*args, **kwargs)
    return decorated

def user_or_cfa_required(f):
    """
    Decorator to ensure the user is either the owner of the data or an approved CFA.
    """
    @wraps(f)
    @token_required
    def decorated(*args, **kwargs):
        user_id = kwargs.get('user_id')
        if request.role != 'CFA' and request.user_id != user_id:
            return jsonify({'error': 'Access restricted to the user or CFAs'}), 403
        if request.role == 'CFA' and request.status != 'approved':
            return jsonify({'error': 'CFA must be approved to access user data'}), 403
        return f(*args, **kwargs)
    return decorated

def admin_required(f):
    """
    Decorator to ensure the user is an admin.
    """
    @wraps(f)
    @token_required
    def decorated(*args, **kwargs):
        if request.role != 'admin':
            return jsonify({'error': 'Access restricted to admins'}), 403
        return f(*args, **kwargs)
    return decorated
